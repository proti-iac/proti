import type { Output } from '@pulumi/pulumi';
import type { Arbitrary } from 'fast-check';

export * from 'fast-check';

/**
 * Specifies an add-hoc generator, wrapping {@link value} and replacing it with
 * values from a user-defined arbitary generator in ProTI test executions.
 * @param value Value to replace with the ad-hoc generator specification.
 * @returns Prepared `with` syntax object to specify the ad-hoc generator.
 */
export const generate = <T>(value: T) => {
	type S = T extends Output<infer U> ? T | U : T;
	return {
		/**
		 * Specifies the arbitrary to use for the value generation.
		 * @param arbitrary Arbitrary to use for the value generation.
		 * @returns Normally, the value wrapped in the ad-hoc generator
		 * specification. During ProTI test executions, a value generated by the
		 * ad-hoc specfication.
		 */
		// eslint-disable-next-line @typescript-eslint/no-unused-vars
		with: (arbitrary: Arbitrary<S>): T => value,
	};
};

/**
 * Specifies an add-hoc oracle, wrapping {@link value} and validating it against
 * a user-defined predicate in ProTI test executions.
 * @param value Value to validate with the ad-hoc oracle specification.
 * @returns Prepared `to` syntax object to specify the oracle's validation
 * predicate.
 */
export const expect = <T>(value: T) => ({
	/**
	 * Specifies the predicate to use for the value validation.
	 * @param predicate Predicate to use for the value validation.
	 * @returns The value wrapped in the ad-hoc oracle specification.
	 */
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	to: (predicate: (value: T) => boolean | Promise<boolean>): T => value,
});
